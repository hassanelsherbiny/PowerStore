@model CheckoutBillingAddressModel
@inject IPageHeadBuilder pagebuilder
@{
    Layout = "_ColumnsOne";

    //title
    pagebuilder.AddTitleParts(T("PageTitle.Checkout").Text);
}
<div class="page checkout-page billing-address-page">
    @await Component.InvokeAsync("CheckoutProgress", new { step = CheckoutProgressStep.Address })
    <h2 class="generalTitle text-sm-center ">@T("Checkout.BillingAddress")</h2>
    <div class="checkout-data">
        <form asp-route="CheckoutBillingAddress" method="post" v-on:submit.prevent="validateBeforeSubmitParam($event, 'nextstep')">
            <div class="billing-addresses">
                @await Component.InvokeAsync("Widget", new { widgetZone = "checkout_billing_address_top" })
                @if (Model.ShipToSameAddressAllowed)
                {
                    <div class="ship-to-same-address">
                        <label class="custom-control custom-checkbox">
                            <input asp-for="ShipToSameAddress" class="custom-control-input" />
                            <span class="custom-control-label"></span>
                            <span class="custom-control-description">@T("Checkout.ShipToSameAddress")</span>
                        </label>
                    </div>

                }
                @if (Model.ExistingAddresses.Any())
                {
                    <div class="select-billing-address">
                        <h5><strong>@T("Checkout.SelectBillingAddress")</strong></h5>
                        <b-row class="row">
                            @foreach (var item in Model.ExistingAddresses)
                            {
                                <b-col lg="4" md="6" sm="6" cols="12">
                                    <b-card header="@item.FirstName @item.LastName" header-tag="h5" class="address-item mb-3">
                                        <ul class="address-box px-0">
                                            <li class="email">
                                                <label>@T("Address.Fields.Email"):</label>
                                                <span>@item.Email</span>
                                            </li>
                                            @if (item.PhoneEnabled)
                                            {
                                                <li class="phone">
                                                    <label>@T("Address.Fields.PhoneNumber"):</label>
                                                    <span>@item.PhoneNumber</span>
                                                </li>
                                            }
                                            @if (item.FaxEnabled)
                                            {
                                                <li class="fax">
                                                    <label>@T("Address.Fields.FaxNumber"):</label>
                                                    <span>@item.FaxNumber</span>
                                                </li>
                                            }
                                            @if (item.CompanyEnabled && !String.IsNullOrEmpty(item.Company))
                                            {
                                                <li class="company">
                                                    @item.Company
                                                </li>
                                            }
                                            @if (item.VatNumberEnabled && !String.IsNullOrEmpty(item.VatNumber))
                                            {
                                                <li class="vatnumber">
                                                    @item.VatNumber
                                                </li>
                                            }
                                            @if (item.StreetAddressEnabled)
                                            {
                                                <li class="address1">
                                                    @item.Address1
                                                </li>
                                            }
                                            @if (item.StreetAddress2Enabled && !String.IsNullOrEmpty(item.Address2))
                                            {
                                                <li class="address2">
                                                    @item.Address2
                                                </li>
                                            }
                                            @if (item.CityEnabled || item.StateProvinceEnabled || item.ZipPostalCodeEnabled)
                                            {
                                                <li class="city-state-zip">
                                                    @if (item.CityEnabled)
                                                    {
                                                        @item.City
                                                    }
                                                    @if (item.CityEnabled && (item.StateProvinceEnabled || item.ZipPostalCodeEnabled))
                                                    {
                                                        <text>,</text>
                                                    }
                                                    @if (item.StateProvinceEnabled)
                                                    {
                                                        @item.StateProvinceName
                                                    }
                                                    @if (item.ZipPostalCodeEnabled)
                                                    {
                                                        @item.ZipPostalCode
                                                    }
                                                </li>
                                            }
                                            @if (item.CountryEnabled && !String.IsNullOrEmpty(item.CountryName))
                                            {
                                                <li class="country">
                                                    @item.CountryName
                                                </li>
                                            }
                                            @if (!String.IsNullOrEmpty(item.FormattedCustomAddressAttributes))
                                            {
                                                <li class="custom-attributes-view">
                                                    @Html.Raw(item.FormattedCustomAddressAttributes)
                                                </li>
                                            }
                                        </ul>
                                        <template v-slot:footer>
                                            <b-button class="select-billing-address-button" onclick="selectBillingAddress@(item.Id)()">
                                                @T("Checkout.BillToThisAddress")
                                            </b-button>
                                            <script asp-location="Footer">
                                                function selectBillingAddress@(item.Id)() {
                                                    var checkbox = document.querySelector('#@Html.IdFor(model => model.ShipToSameAddress)');
                                                    if (checkbox != null && checkbox.checked) {
                                                        location=('@Html.Raw(Url.RouteUrl("CheckoutSelectBillingAddress", new {addressId = item.Id, shipToSameAddress = "true"}))');
                                                    } else {
                                                        location=('@Url.RouteUrl("CheckoutSelectBillingAddress", new {addressId = item.Id })');
                                                    }
                                                }
                                            </script>
                                        </template>
                                    </b-card>
                                </b-col>
                            }
                        </b-row>
                    </div>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = "checkout_billing_address_middle" })
                <div class="new-billing-address">
                    @if (Model.ExistingAddresses.Any())
                    {
                        <h5><strong>@T("Checkout.OrEnterNewAddress")</strong></h5>
                    }
                    else
                    {
                        <h5>
                            <strong>@T("Checkout.EnterBillingAddress")</strong>
                        </h5>
                    }
                    <div class="enter-address">
                        <div asp-validation-summary="ModelOnly" class="message-error"></div>
                        @{
                            var dataDictAddress = new ViewDataDictionary(ViewData);
                            dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                            <partial name="_CreateOrUpdateAddress" model="Model.NewAddress" view-data="dataDictAddress" />
                        }
                    </div>
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = "checkout_billing_address_bottom" })
            </div>
            <b-col cols="12" class="buttons mb-3 px-0">
                <input type="submit" value="@T("Checkout.NextButton")" class="btn btn-info new-address-next-step-button" />
            </b-col>
        </form>
        <div class="order-summary">
            <h2 class="generalTitle"><strong>@T("Checkout.OrderSummary")</strong></h2>
            <partial name="OrderSummary" model="null" />
        </div>
    </div>
</div>
